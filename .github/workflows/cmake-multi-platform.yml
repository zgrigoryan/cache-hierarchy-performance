name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration.
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration.
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Run main program and verify output format
      shell: bash
      run: |
        echo "Running main program..."
        cd "${{ steps.strings.outputs.build-output-dir }}"
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          ./Release/my_program.exe > program_output.log
        else
          chmod +x ./my_program || true
          ./my_program > program_output.log
        fi

        echo "----- Program Output -----"
        cat program_output.log
        echo "--------------------------"

        # Verify header line contains "Stride" and "Avg Time"
        grep -q "Stride" program_output.log || { echo "Missing 'Stride' in header"; exit 1; }
        grep -q "Avg Time" program_output.log || { echo "Missing 'Avg Time' in header"; exit 1; }

        # Verify that there is a dashed separator line of exactly 25 dashes.
        grep -q "^-------------------------$" program_output.log || { echo "Missing dashed separator line"; exit 1; }

        # Count non-empty lines; expecting 12 lines (1 header, 1 separator, 10 data lines).
        line_count=$(grep -v '^\s*$' program_output.log | wc -l)
        if [ "$line_count" -ne 12 ]; then
          echo "Expected 12 non-empty lines, but found $line_count"
          exit 1
        fi

        echo "Program output format verified successfully!"
